# -*- coding: utf-8 -*-
"""iitk_pydata_RajGTiwari_day02.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Z_U6M7gY-ZnVmVbmjAfMFCVOhNPJP6-J
"""

class Car:
  def __init__(self, make, model, color, year):
    self.make=make
    self.model=model
    self.year=year
    self.color=color
    self.position=0
    self.speed=0
    self.state='stopped'
  def start(self):
    self.state='startrd'
  def accelerate(self, rate, time):
    if self.state in ['started','running']:
      self.speed=self.speed+rate*time
      self.position=self.position+(rate*time*time)/2.0
    else:
      pass
  def deaccelerate(self, rate, time):
      self.speed=self.speed+rate*time
      self.position=self.position+(self*speed-(rate*time*time)/2.0)
      
mycar1=Car("Maruti","swift","While",2011)
mycar1.start()

class Employee:  
    def __init__(self,name,id):  
        self.id = id;  
        self.name = name;  
    def display (self):  
        print("ID: %d \nName: %s"%(self.id,self.name))  
emp1 = Employee("John",101)  
emp2 = Employee("David",102)  
  
#accessing display() method to print employee 1 information  
   
emp1.display();   
  
#accessing display() method to print employee 2 information  
emp2.display();

import random
class Car:
  def __init__(self, make, num_plate):
    self.make=make
    self.num_plate=num_plate
    self.position=0


  def accelerate(self, rate, time):
      self.position=self.position+(rate*time*time)/2.0
  
  def __repr(self):
    return self.make+"|"+srt(self.pos)

brands=['Maruti','Merc','Fiat','Audi']
my_cars=[]
for i in range(0,1000):
  b=random.choices(brands)
  c=Car(b,i)
  my_cars.append(c)
  c.accelerate(random.randint(1,10),random.randint(10,60))
sorted(my_cars, key=lambda c:c.position, reverse=True)

class Song:

    def __init__(self, title, artist, album, track_number):
        self.title = title
        self.artist = artist
        self.album = album
        self.track_number = track_number

        artist.add_song(self)


class Album:

    def __init__(self, title, artist, year):
        self.title = title
        self.artist = artist
        self.year = year

        self.tracks = []

        artist.add_album(self)

    def add_track(self, title, artist=None):
        if artist is None:
            artist = self.artist

        track_number = len(self.tracks)

        song = Song(title, artist, self, track_number)

        self.tracks.append(song)


class Artist:
    def __init__(self, name):
        self.name = name

        self.albums = []
        self.songs = []

    def add_album(self, album):
        self.albums.append(album)

    def add_song(self, song):
        self.songs.append(song)


class Playlist:
    def __init__(self, name):
        self.name = name
        self.songs = []

    def add_song(self, song):
        self.songs.append(song)
    def disp_list(self):
      for i in range(len(self.songs)):
        print(self.songs[i].title)
        

artist = Artist("Kishor Kumar")
album = Album("Sholey", artist, 1975)
album.add_track("Ye dosti hum nahi")
album.add_track("Mehbooba mehbooba")
album.add_track("Koi hasina")

playlist = Playlist("My Playlist")

for song in album.tracks:
    playlist.add_song(song)
playlist.disp_list()

class Person(object): 
  def __init__(self, name): 
    self.name = name 

   
  def getName(self): 
    return self.name 

   
class Employee(Person):
   def __init__(self,p1): 
      self.salary=0
      self.name=p1.getName()
  
      
class Security(Employee):
   def __init__(self, e,days,wages):
      self.name=e.name
      self.days=days
      self.wages=wages
       
  
   def cal_sal(self):
      self.salary=self.days*self.wages
      
  
class Lecturer(Employee):
  def __init__(self,e, basic):
    self.name=e.name
    self.basic=basic
    
  def cal_sal(self):
    self.salary=self.basic+self.basic*2+self.basic*.25
  
    
  
p1=Person("Ram Kumar")
e1=Employee(p1)
l1=Lecturer(e1,20000)
l1.cal_sal()
print("Lecturer : "+l1.name+"  "+str(l1.salary))

p2=Person("Ram Lal")
e2=Employee(p2)
s1=Security(e2,25,400)
s1.cal_sal()
print("Security Gaurd : "+s1.name+"  "+str(s1.salary))

searchWalaDost="https://api.adviceslip.com/advice/search/spiders"

import requests
meriLifeProblems=searchWalaDost.format(query="What is Life ?")
res=requests.get(meriLifeProblems)
res.json()

searchWalaDost="https://api.adviceslip.com/advice/search/spiders"
#q=input("Enter query")
import requests
meriLifeProblems=searchWalaDost.format(query="jkhkj")
res=requests.get(meriLifeProblems)
res.json()

searchWalaDost="https://api.adviceslip.com/advice/search/spiders"
q=input("Enter query")
import requests
meriLifeProblems=searchWalaDost.format(query=q)
res=requests.get(meriLifeProblems)
res.json()



url="https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol={symbol}&apikey={apikey}"
res=requests.get(url.format(symbol="AMZN",apikey={"ESVXEK26S94G56L7"}))

res.json()

url="https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol={symbol}&apikey={apikey}"
res=requests.get(url.format(symbol="AMZN",apikey={"ESVXEK26S94G56L7"}))
res.json()

#using panda
import pandas as pd
url="https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol={symbol}&apikey={apikey}"
res=requests.get(url.format(symbol="AMZN",apikey={"ESVXEK26S94G56L7"}))
data=res.json()

data.keys()
a=data['Time Series (Daily)']
df = pd.DataFrame(data=a)
df = df.fillna(' ').T
df


#from IPython.core.display import display, HTML
#display(HTML())

url="https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol={symbol}&apikey={apikey}"
res=requests.get(url.format(symbol="AMZN",apikey={"ESVXEK26S94G56L7"}))
data=res.json()

#data.keys()
a=data['Time Series (Daily)']
from IPython.core.display import display, HTML
display(HTML('''
<table border=1>
  <thead>
    <th>Date</th>
    <th>Open</th>
    <th>High</th>
    <th>Low</th>
    <th>Close</th>
    <th>Volume</th>
   </thead>
   <tbody>'''+for k,v in a.items():
             +'''<tr>
                 <td>'''+k+'''</td>'''+
                 for k1,v1 in v.items():+''' <td>'''+v1+''' 
                 </tr>
</table>
'''))

url="https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol={symbol}&apikey={apikey}"
res=requests.get(url.format(symbol="AMZN",apikey={"ESVXEK26S94G56L7"}))
data=res.json()

#data.keys()
a=data['Time Series (Daily)']

class DictTable(dict):
    # Overridden dict class which takes a dict in the form {'a': 2, 'b': 3},
    # and renders an HTML Table in IPython Notebook.
    def _repr_html_(self):
        html = ["<table border=1>"]
        html.append("<thead> <th>Date</th><th>Open</th><th>High</th><th>Low</th><th>Close</th><th>Volume</th></thead>")
        for key, value in self.items():
            html.append("<tr>")
            html.append("<td>{0}</td>".format(key))
            for k1,v1 in value.items():
              html.append("<td>{0}</td>".format(v1))
            html.append("</tr>")
        html.append("</table>")
        return ''.join(html)

DictTable(a)

from jinja2 import Template
from IPython.display import HTML

d = {'a': 2, 'b': 3}

# content of the template that can be externalised
template_content = """
<table>
{% for key, value in data.items() %}
   <tr>
        <th> {{ key }} </th>
        <td> {{ value }} </td>
   </tr>
{% endfor %}
</table>"""

template = Template(template_content)

# template rendering embedded in the HTML representation
HTML(template.render(data=d))

#using jinja
from jinja2 import Template
from IPython.display import HTML

url="https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol={symbol}&apikey={apikey}"
res=requests.get(url.format(symbol="AMZN",apikey={"ESVXEK26S94G56L7"}))
data=res.json()

#data.keys()
a=data['Time Series (Daily)']

template_content = """

<table border=1>
<thead> 
  <th>Date</th><th>Open</th><th>High</th><th>Low</th><th>Close</th><th>Volume</th>
</thead>
{% for key, value in data.items()  %}
    <tr>
        <td>{{ key }}</td>
           {%  for k1,v1 in value.items() %}
                <td>{{ v1 }}</td>
           {% endfor %}
    </tr>
{% endfor %}
</table>"""
template = Template(template_content)

# template rendering embedded in the HTML representation
HTML(template.render(data=a))

